namespace back.Application.Services;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using DTOs;
using Common;
using Interfaces;


public class ResumeAnalysisService : IResumeAnalysisService
    {
        private readonly HttpClient _httpClient;
        private readonly IConfiguration _configuration;

        public ResumeAnalysisService(HttpClient httpClient, IConfiguration configuration)
        {
            _httpClient = httpClient;
            _configuration = configuration;
        }

        public async Task<Result<List<SuggestionDto>>> AnalyzeResumeAsync(ResumeDtoForAi resume)
        {
            try
            {
                // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                var authUrl = _configuration["AI:AuthUrl"]; // –Ω–∞–ø—Ä–∏–º–µ—Ä, "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
                var gigachatUrl = _configuration["AI:GigaChatApiUrl"]; // –Ω–∞–ø—Ä–∏–º–µ—Ä, "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
                var authorizationKey = _configuration["AI:AuthorizationKey"]; // –≤–∞—à –∫–ª—é—á
                var scope = _configuration["AI:Scope"]; // –Ω–∞–ø—Ä–∏–º–µ—Ä, "GIGACHAT_API_PERS"

                var token = await GetAccessTokenAsync(authUrl, authorizationKey, scope);
                if (string.IsNullOrEmpty(token))
                    return Result<List<SuggestionDto>>.Failure("Access token not obtained");

                // –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, –∫–∞–∫ –≤ –≤–∞—à–µ–º —Å–∫—Ä–∏–ø—Ç–µ)
                string systemPrompt = @"
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–¥–≤–∏–∂–æ–∫ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—é–º–µ.

–¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å—Ç—Ä–æ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

[
  {
    ""id"": ""—Å—Ç—Ä–æ–∫–∞ (sug-{—É–Ω–∏–∫–∞–ª—å–Ω—ã–πId})"",
    ""type"": ""experience | skills | description | etc"",
    ""title"": ""—Å—Ç—Ä–æ–∫–∞"",
    ""description"": ""—Å—Ç—Ä–æ–∫–∞"",
    ""confidence"": —á–∏—Å–ª–æ (–æ—Ç 0.0 –¥–æ 1.0),
    ""before"": ""—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫"",
    ""after"": ""—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫"",
    ""reasoning"": ""—Å—Ç—Ä–æ–∫–∞""
  }
]

üõë –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê (–°–¢–†–û–ì–û):
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞–π.
- –ï—Å–ª–∏ type === ""skills"":
  - ""before"" –∏ ""after"" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–∞–º–∏ —Å—Ç—Ä–æ–∫.
  - –î–æ–±–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏.
- –ï—Å–ª–∏ type === ""experience"":
  - ""before"" ‚Äî –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã),
  - ""after"" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: ""{—Ü–µ–ª–µ–≤–∞—è–î–æ–ª–∂–Ω–æ—Å—Ç—å} + —Ç–≤–æ—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"".
  - –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –Ω–µ —Å–ø–∏—Å–∫–æ–º.
- –ï—Å–ª–∏ type === ""description"":
  - –¢–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ –∏ –¥–ª—è ""experience"": —Å—Ç—Ä–æ–∫–∞ ‚Üí —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º {—Ü–µ–ª–µ–≤–∞—è–î–æ–ª–∂–Ω–æ—Å—Ç—å}.
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω—ã —Ç–∏–ø–∞ ""{company}"" –∏–ª–∏ ""{description}"" ‚Äî —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
- –°–æ—Ö—Ä–∞–Ω—è–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ ""before"" –±—ã–ª —Å–ø–∏—Å–∫–æ–º, ""after"" —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.

–†–µ–∑—É–ª—å—Ç–∞—Ç –î–û–õ–ñ–ï–ù –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.
".Trim();

                // –§–æ—Ä–º–∏—Ä—É–µ–º payload
                var payload = new
                {
                    model = "GigaChat",
                    stream = false,
                    update_interval = 0,
                    messages = new object[]
                    {
                        new { role = "system", content = systemPrompt },
                        new { role = "user", content = JsonConvert.SerializeObject(resume, Formatting.None) }
                    }
                };

                var requestMessage = new HttpRequestMessage(HttpMethod.Post, gigachatUrl);
                requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);
                requestMessage.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                var payloadJson = JsonConvert.SerializeObject(payload);
                requestMessage.Content = new StringContent(payloadJson, Encoding.UTF8, "application/json");

                var response = await _httpClient.SendAsync(requestMessage);
                response.EnsureSuccessStatusCode();
                var responseContent = await response.Content.ReadAsStringAsync();

                // –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
                dynamic responseJson = JsonConvert.DeserializeObject(responseContent);
                string messageContent = responseJson.choices[0]?.message?.content;
                if (string.IsNullOrWhiteSpace(messageContent))
                    return Result<List<SuggestionDto>>.Failure("No content in AI response");

                // –£–¥–∞–ª—è–µ–º Markdown-–æ–±—ë—Ä—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, ```json ... ```)
                messageContent = Regex.Replace(messageContent.Trim(), @"^```json\s*|\s*```$", "", RegexOptions.Singleline);

                var suggestions = JsonConvert.DeserializeObject<List<SuggestionDto>>(messageContent);
                if (suggestions == null)
                    return Result<List<SuggestionDto>>.Failure("Failed to parse suggestions");

                return Result<List<SuggestionDto>>.Success(suggestions);
            }
            catch (Exception ex)
            {
                return Result<List<SuggestionDto>>.Failure($"Error during resume analysis: {ex.Message}");
            }
        }

        private async Task<string> GetAccessTokenAsync(string authUrl, string authorizationKey, string scope)
        {
            var request = new HttpRequestMessage(HttpMethod.Post, authUrl);
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            request.Headers.Add("RqUID", Guid.NewGuid().ToString());
            request.Headers.Add("Authorization", $"Basic {authorizationKey}");
            var contentData = new Dictionary<string, string> { { "scope", scope } };
            request.Content = new FormUrlEncodedContent(contentData);
            var response = await _httpClient.SendAsync(request);
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            dynamic obj = JsonConvert.DeserializeObject(json);
            return obj.access_token;
        }
    }