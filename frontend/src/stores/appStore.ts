// appStore.ts
import { defineStore } from 'pinia'
import { useProfileStore } from './profileStore'
import { useResumeStore } from './resumesStore'
import { ref } from 'vue'

export const useAppStore = defineStore('app', () => {
  const isAppLoading = ref(true)
  const isAppReady = ref(false)
  const error = ref<string | null>(null)
  // const analysisResult = ref<any>(null)

  const initialize = async () => {
    isAppLoading.value = true
    error.value = null

    try {
      const profileStore = useProfileStore()
      const resumesStore = useResumeStore()

      await profileStore.fetchProfile()
      await resumesStore.fetchResumes()

      isAppReady.value = true
    } catch (err: any) {
      error.value = err.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
      console.error('[appStore] Init error:', err)
    } finally {
      isAppLoading.value = false
    }
  }

  const reset = () => {
    isAppLoading.value = false
    isAppReady.value = false
    error.value = null
  }

  const logout = () => {
    const profileStore = useProfileStore()
    const resumesStore = useResumeStore()

    profileStore.$reset()
    resumesStore.$reset()
    reset()
  }

  // const startJobAnalysis = async (JobText: string) => {
  //   try {
  //     const profileStore = useProfileStore()
  //     const mainResumeId = profileStore.profile?.mainResumeId
  //     if (!mainResumeId) {
  //       throw new Error('–ì–ª–∞–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ')
  //     }

  //     const resumesStore = useResumeStore()
  //     const resume = resumesStore.resumes.find(r => r.id === mainResumeId)
  //     if (!resume) {
  //       throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∑—é–º–µ —Å —Ç–∞–∫–∏–º ID')
  //     }

  //     const res = await fetch('/analyse', {
  //       method: 'POST',
  //       headers: {
  //         'Content-Type': 'application/json',
  //       },
  //       body: JSON.stringify({
  //         JobText,
  //         resume
  //       }),
  //     })

  //     const result = await res.json()
  //     analysisResult.value = result
  //   } catch (err) {
  //     console.error('[appStore] –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —É–¥–∞–ª—Å—è:', err)
  //     throw err
  //   }
  // }

  const analysisResult = ref<null | {
    summary: {
      match: number,
      skills: number,
      experience: number,
      keywords: number
    },
    insights: { text: string }[],
    skills: {
      matched: string[],
      missing: string[],
      similar: string[]
    },
    timeline: {
      matched: string[],
      gap: string[]
    }
  }>(null)
  

  const startJobAnalysis = async (jobText: string) => {
    try {
      const profileStore = useProfileStore()
      const resumesStore = useResumeStore()
      const mainResumeId = profileStore.profile?.mainResumeId
      const resume = resumesStore.resumes.find(r => r.id === mainResumeId)
  
      // üí§ –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      await new Promise(res => setTimeout(res, 1000))
  
      // üí° –ú–æ–∫-–æ—Ç–≤–µ—Ç
      const mockResult = {
        summary: {
          match: 82,
          skills: 75,
          experience: 66,
          keywords: 90
        },
        insights: [
          { text: '–î–æ–±–∞–≤—å—Ç–µ Vue.js ‚Äî —ç—Ç–æ –∫–ª—é—á–µ–≤–æ–π –Ω–∞–≤—ã–∫' },
          { text: '–£—Ç–æ—á–Ω–∏—Ç–µ –æ–ø—ã—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã' }
        ],
        skills: {
          matched: ['Vue', 'REST'],
          missing: ['TypeScript'],
          similar: ['JS ‚Üí TS']
        },
        timeline: {
          matched: ['2022‚Äì2023'],
          gap: ['2021']
        }
      }
  
      // üîÑ –°–æ—Ö—Ä–∞–Ω–∏ –≤ appStore (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ `analysisResult`)
      analysisResult.value = mockResult
  
    } catch (err) {
      console.error('[appStore] –ê–Ω–∞–ª–∏–∑ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ —É–¥–∞–ª—Å—è:', err)
      throw err
    }
  }
  

  return {
    isAppLoading,
    isAppReady,
    error,
    initialize,
    reset,
    logout,
    startJobAnalysis,
    analysisResult 
  }
})
