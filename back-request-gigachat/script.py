import sys
import io
import requests
import uuid
import json
import urllib3
import re

# === üîß –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8 (–¥–ª—è Windows PowerShell)
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# === üîí –ü–æ–¥–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª—é—á—ë–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# === 0. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ===
AUTH_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
GIGACHAT_API_URL = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
AUTHORIZATION_KEY = "ZTgyZWNmOGEtZDJiNy00N2Q1LWE3MWItZmMzMTgzZjVhNmEwOjE4OWM4NmI1LTJkYjAtNDFjYS04ZTg3LWI2YmViYTA3ZmZlOQ=="  # ‚Üê –ó–ê–ú–ï–ù–ò –Ω–∞ —Å–≤–æ–π –∫–ª—é—á
SCOPE = "GIGACHAT_API_PERS"

# === 1. –ü–æ–ª—É—á–µ–Ω–∏–µ Access Token ===
def get_access_token():
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': str(uuid.uuid4()),
        'Authorization': f'Basic {AUTHORIZATION_KEY}'
    }
    data = {'scope': SCOPE}
    response = requests.post(AUTH_URL, headers=headers, data=data, verify=False)
    response.raise_for_status()
    token = response.json().get("access_token")
    if not token:
        raise RuntimeError("Access token not found in response")
    return token

# === 2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ payload –¥–ª—è GigaChat ===
def build_payload(resume_data: dict) -> dict:
    system_prompt = """
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–¥–≤–∏–∂–æ–∫ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∑—é–º–µ.

–¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å—Ç—Ä–æ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

[
  {
    "id": "—Å—Ç—Ä–æ–∫–∞ (sug-{—É–Ω–∏–∫–∞–ª—å–Ω—ã–πId})",
    "type": "experience | skills | description | etc",
    "title": "—Å—Ç—Ä–æ–∫–∞",
    "description": "—Å—Ç—Ä–æ–∫–∞",
    "confidence": —á–∏—Å–ª–æ (–æ—Ç 0.0 –¥–æ 1.0),
    "before": "—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫",
    "after": "—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫",
    "reasoning": "—Å—Ç—Ä–æ–∫–∞"
  }
]

üõë –í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê (–°–¢–†–û–ì–û):
- –ù–ï –ø—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ‚Äî –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞–π.
- –ï—Å–ª–∏ type === "skills":
  - "before" –∏ "after" –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–∞–º–∏ —Å—Ç—Ä–æ–∫.
  - –î–æ–±–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏.
- –ï—Å–ª–∏ type === "experience":
  - "before" ‚Äî –æ–±—ã—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (—Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã),
  - "after" –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å: "`{—Ü–µ–ª–µ–≤–∞—è–î–æ–ª–∂–Ω–æ—Å—Ç—å}` + —Ç–≤–æ—è —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è".
  - –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –Ω–µ —Å–ø–∏—Å–∫–æ–º.
- –ï—Å–ª–∏ type === "description":
  - –¢–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ –∏ –¥–ª—è "experience": —Å—Ç—Ä–æ–∫–∞ ‚Üí —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º `{—Ü–µ–ª–µ–≤–∞—è–î–æ–ª–∂–Ω–æ—Å—Ç—å}`.
- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω—ã —Ç–∏–ø–∞ "{company}" –∏–ª–∏ "{description}" ‚Äî —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
- –°–æ—Ö—Ä–∞–Ω—è–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ "before" –±—ã–ª —Å–ø–∏—Å–∫–æ–º, "after" —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º.
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π Markdown –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON.

–†–µ–∑—É–ª—å—Ç–∞—Ç –î–û–õ–ñ–ï–ù –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.
""".strip()

    return {
        "model": "GigaChat",
        "stream": False,
        "update_interval": 0,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": json.dumps(resume_data, ensure_ascii=False)}
        ]
    }

# === 3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ===
def analyze_resume(resume_data: dict) -> list:
    try:
        token = get_access_token()
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json',
            'Authorization': f'Bearer {token}'
        }
        payload = build_payload(resume_data)

        response = requests.post(GIGACHAT_API_URL, headers=headers, json=payload, verify=False)
        response.encoding = 'utf-8'
        response.raise_for_status()
        response_json = response.json()

        print("üì¶ RAW response:")
        print(json.dumps(response_json, indent=2, ensure_ascii=False))

        # –ü–æ–ª—É—á–∞–µ–º message.content
        message_content = response_json.get('choices', [{}])[0].get('message', {}).get('content', '')

        print("\nüßæ Raw message_content:")
        print(message_content)

        # –£–¥–∞–ª—è–µ–º Markdown-–æ–±—ë—Ä—Ç–∫—É ```json ... ```
        cleaned_content = re.sub(r"^```json\s*|\s*```$", "", message_content.strip(), flags=re.DOTALL)

        try:
            suggestions = json.loads(cleaned_content)
        except Exception as parse_err:
            print("‚ùå JSON parsing error:", parse_err)
            print("üîé Cleaned content:")
            print(cleaned_content)
            return []

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        assert isinstance(suggestions, list), "Result is not a list"
        for item in suggestions:
            assert all(key in item for key in [
                "id", "type", "title", "description", "confidence", "before", "after", "reasoning"
            ]), f"Invalid format in: {item}"

        return suggestions

    except Exception as e:
        print("‚ùå Error during resume analysis:", e)
        return []

# === 4. –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—é–º–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ===
if __name__ == "__main__":
    resume_data = {
        "id": 1,
        "title": "–†–µ–∑—é–º–µ —Å—Ç–∞—Ä—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        "city": "–°–∞–Ω-–§—Ä–∞–Ω—Ü–∏—Å–∫–æ",
        "job": "–§—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "experience": [
            {
                "company": "Google",
                "position": "–§—Ä–æ–Ω—Ç–µ–Ω–¥-–∏–Ω–∂–µ–Ω–µ—Ä",
                "startDate": "2022-01",
                "endDate": "2024-12",
                "description": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª 5 –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ React, —É–≤–µ–ª–∏—á–∏–≤ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ 23%."
            },
            {
                "company": "CodeCorp",
                "position": "–ú–ª–∞–¥—à–∏–π —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
                "startDate": "2020-01",
                "endDate": "2021-12",
                "description": "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–∞ Vue.js –∏ TypeScript."
            }
        ],
        "education": [],
        "skills": ["React", "TypeScript", "Redux"],
        "template": "modern",
        "date": "2025-03-30T00:00:00Z",
        "userId": 123,
        "description": "–û–ø—ã—Ç–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Å—Ç—Ä–µ–º—è—â–∏–π—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ —Å –≤—ã—Å–æ–∫–∏–º –≤–ª–∏—è–Ω–∏–µ–º –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç."
    }

    suggestions = analyze_resume(resume_data)
    print("\n‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:")
    print(json.dumps(suggestions, ensure_ascii=False, indent=2))
